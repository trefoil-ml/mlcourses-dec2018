install.packages("clusterSim")
suppressMessages(library(clusterSim))
install.packages("genefilter")
library(devtools)
install_github("Bioconductor-mirror/genefilter")
library(devtools); install_github("Bioconductor-mirror/genefilter")
install.packages("C:/Users/hzmarrou/Desktop/genefilter_1.64.0.zip", repos = NULL, type = "win.binary")
install.packages("clusterSim")
suppressMessages(library(clusterSim))
install.packages("C:/Users/hzmarrou/Desktop/S4Vectors_0.20.1.zip", repos = NULL, type = "win.binary")
suppressMessages(library(clusterSim))
install.packages("clusterSim")
suppressMessages(library(clusterSim))
install.packages("C:/Users/hzmarrou/Downloads/BiocGenerics_0.28.0.zip", repos = NULL, type = "win.binary")
suppressMessages(library(clusterSim))
install.packages("BiocManager")
suppressMessages(library(clusterSim))
install.packages("Biobase")
BiocManager::install("Biobase", version = "3.8")
suppressMessages(library(clusterSim))
install.packages("annotate")
suppressMessages(library(clusterSim))
install.packages("annotate")
BiocManager::install("annotate", version = "3.8")
suppressMessages(library(clusterSim))
suppressMessages(library(clusterSim))
data <- read_csv("./data/pima_indians_diabetes.csv", col_names = FALSE)
suppressMessages(library(clusterSim))
suppressMessages(library(tidyverse))
data <- read_csv("./data/pima_indians_diabetes.csv", col_names = FALSE)
names <- c('preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class')
names(data) <- names
dataRescale <-  cbind(data.frame(data.Normalization(as.matrix(data[, -9]), type="n4", normalization="column")),data[,9])
View(dataRescale)
dataStand <-  cbind(data.frame(data.Normalization(as.matrix(data[, -9]), type="n1", normalization="column")),data[,9])
dataNorm <-  cbind(data.frame(data.Normalization(as.matrix(data[, -9]), type="n1", normalization="row")),data[,9])
data$binAge <- ifelse(data$age>30, 1, 0)
dataStand <-  cbind(data.frame(data.Normalization(as.matrix(data[, -9]), type="n1", normalization="column")),data[,9])
dataStand <-  cbind(data.frame(data.Normalization(as.matrix(data[, -9]), type="n1", normalization="column")),data[,9])
dataNorm <-  cbind(data.frame(data.Normalization(as.matrix(data[, -9]), type="n1", normalization="row")),data[,9])
dataNorm <-  cbind(data.frame(data.Normalization(as.matrix(data[, -9]), type="n1", normalization="row")),data[,9])
data$catAge = cut(data$age, breaks=c(0,25,30,40,50,99))
suppressMessages(library(tidyverse))
suppressMessages(library(clusterSim))
suppressMessages(library(tidyverse))
data <- read_csv("./data/pima_indians_diabetes.csv", col_names = FALSE)
names <- c('preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class')
names(data) <- names
dataRescale <-  cbind(data.frame(data.Normalization(as.matrix(data[, -9]), type="n4", normalization="column")),data[,9])
dataStand <-  cbind(data.frame(data.Normalization(as.matrix(data[, -9]), type="n1", normalization="column")),data[,9])
dataNorm <-  cbind(data.frame(data.Normalization(as.matrix(data[, -9]), type="n1", normalization="row")),data[,9])
data$binAge <- ifelse(data$age>30, 1, 0)
data$binAge <- ifelse(data$age>30, 1, 0)
install.packages("caret")
install.packages("mlbench")
set.seed(7)
# load the library
suppressMessages(library(mlbench))
suppressMessages(library(caret))
install.packages("NMF")
set.seed(7)
# load the library
suppressMessages(library(mlbench))
suppressMessages(library(caret))
install.packages("bigmemory")
set.seed(7)
# load the library
suppressMessages(library(mlbench))
suppressMessages(library(caret))
# load the data
data <- read_csv("./data/pima_indians_diabetes.csv", col_names = FALSE)
names <- c('preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class')
names(data) <- names
data$class <- factor(data$class)
data       <- as.data.frame(data)
filterCtrl <- sbfControl(functions = rfSBF, method = "repeatedcv", repeats = 5)
set.seed(10)
rfWithFilter <- sbf(data[,1:8], data[,9], sbfControl = filterCtrl)
install.packages("randomForest")
set.seed(7)
# load the library
suppressMessages(library(mlbench))
suppressMessages(library(caret))
# load the data
data <- read_csv("./data/pima_indians_diabetes.csv", col_names = FALSE)
names <- c('preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class')
names(data) <- names
data$class <- factor(data$class)
data       <- as.data.frame(data)
filterCtrl <- sbfControl(functions = rfSBF, method = "repeatedcv", repeats = 5)
set.seed(10)
rfWithFilter <- sbf(data[,1:8], data[,9], sbfControl = filterCtrl)
rfWithFilter
set.seed(7)
# load the library
suppressMessages(library(mlbench))
suppressMessages(library(caret))
# load the data
data <- read_csv("./data/pima_indians_diabetes.csv", col_names = FALSE)
names <- c('preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class')
names(data) <- names
data$class <- factor(data$class)
data       <- as.data.frame(data)
filterCtrl <- sbfControl(functions = rfSBF, method = "repeatedcv", repeats = 5)
set.seed(10)
rfWithFilter <- sbf(data[,1:8], data[,9], sbfControl = filterCtrl)
rfWithFilter
# define the control using a random forest selection function
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
# run the RFE algorithm
results <- rfe(data[,1:8], data[,9], sizes=c(1:8), rfeControl=control)
# summarize the results
print(results)
# list the chosen features
predictors(results)
# plot the results
plot(results, type=c("g", "o"))
install.packages(c("FactoMineR", "factoextra"))
suppressMessages(library("FactoMineR"))
suppressMessages(library("factoextra"))
respca <- PCA(data[, -9], graph = FALSE)
fviz_eig(respca, addlabels = TRUE, ylim = c(0, 30))
set.seed(7)
# load the library
suppressMessages(library(mlbench))
suppressMessages(library(caret))
# load the data
data  <- read_csv("./data/pima_indians_diabetes.csv", col_names = FALSE)
names <- c('preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class')
names(data) <- names
data$class <- factor(data$class)
data       <- as.data.frame(data)
filterCtrl <- sbfControl(functions = rfSBF, method = "repeatedcv", repeats = 5)
set.seed(10)
rfWithFilter <- sbf(data[,1:8], data[,9], sbfControl = filterCtrl)
rfWithFilter
help(sbfControl)
suppressMessages(library(randomUniformForest))
idx <- rminer::holdout(y = data$class)
suppressMessages(library(randomUniformForest))
idx <- rminer::holdout(y = data$class)
install.packages("rminer")
suppressMessages(library(randomUniformForest))
idx <- rminer::holdout(y = data$class)
prep <- caret::preProcess(x = data[idx$tr, -ncol(data)],method = c("spatialSign"))
x.train <- predict(prep, data[idx$tr, -ncol(data)])
x.test <- predict(prep, data[idx$ts, -ncol(data)])
y.train <- data[idx$tr, ncol(data)]
y.test <- data[idx$ts, ncol(data)]
ruf <- randomUniformForest( X = x.train,
Y = y.train,
xtest = x.test,
ytest = y.test,
mtry = 1, ntree = 300,
threads = 2,
nodesize = 2
)
print(ruf)
plot(ruf)
print(ruf)
summary(ruf)
pr.ruf <- predict(ruf, x.test, type = "response");
ms.ruf <- model.stats(pr.ruf, y.test)
pr.ruf
ms.ruf
imp.ruf <- importance(ruf, Xtest = x.test, maxInteractions = 3)
best <- c("mass", "plas", "age", "skin", "preg")
ruf.opt
x.tr <- x.train[ ,best]
x.tst <- x.test[ ,best]
ruf.opt <- randomUniformForest(X = x.tr,
Y = y.train,
xtest = x.tst,
ytest = y.test,
ntree = 300,
mtry = "random",
nodesize = 1,
threads = 2)
ruf.opt
suppressMessages(library(tidyverse))
suppressMessages(library(tidyverse))
rm(list =ls())
suppressMessages(library(tidyverse))
suppressMessages(library(highcharter))
install.packages("highcharter")
install.packages("xts")
suppressMessages(library(highcharter))
suppressMessages(library(xts))
load("./data/EURUSD/EURUSD30.RData")
pricets     <- read.csv("./data/EURUSD/price.csv")
pricets$ts  <- as.POSIXct(paste(pricets$Date, pricets$TF, format="%Y-%m-%d %H:%M:%S"))
ts_price    <- pricets$ts[1:nrow(pricets)]
tsprice     <- xts(pricets[,4],order.by = ts_price)
highchart(type = "stock") %>%  hc_add_series(tsprice, id = "FX close rate")
suppressMessages(library(highcharter))
suppressMessages(library(xts))
load("./data/EURUSD/EURUSD30.RData")
pricets     <- read.csv("./data/EURUSD/price.csv")
pricets$ts  <- as.POSIXct(paste(pricets$Date, pricets$TF, format="%Y-%m-%d %H:%M:%S"))
ts_price    <- pricets$ts[1:nrow(pricets)]
tsprice     <- xts(pricets[,4],order.by = ts_price)
highchart(type = "stock") %>%  hc_add_series(tsprice, id = "FX close rate")
highchart(type = "stock") %>%  hc_add_series(tsprice, id = "FX close rate")
source("createIndicators.R")
Indicators <- createIndicators(pricets)
summary(Indicators)
ZZ <- function(pr = pricets, ch = ch , mode="m") {
require(TTR)
if(ch > 1) ch <- ch/(10 ^ (Dig - 1))
if(mode == "m"){pr <- pr[ ,'Med']}
if(mode == "hl") {pr <- pr[ ,c("High", "Low")]}
if(mode == "cl") {pr <- pr[ ,c("Close")]}
zz <- ZigZag(pr, change = ch, percent = F, retrace = F, lastExtreme = T)
n <- 1:length(zz)
for(i in n) { if(is.na(zz[i])) zz[i] = zz[i-1]}
dz <- zz %>% diff %>% c(0,.)
sig <- sign(dz)
return(cbind(zz, sig))
}
out1 <- ZZ(ch = 25)
out2 <- ZZ(ch = 50)
data <- cbind(as.data.frame(Indicators) , Class = factor(out1[ ,2])) %>% na.omit
data <- data[data$Class != 0, ]
data$Class <- rminer::delevels(data$Class, c("0", "1"), "1")
data <- cbind(as.data.frame(Indicators) , Class = factor(out1[ ,2])) %>% na.omit
data <- data[data$Class != 0, ]
data$Class <- rminer::delevels(data$Class, c("0", "1"), "1")
table(data$Class)
suppressMessages(library(broom))
suppressMessages(library(corrplot))
descCor <- cor(data[ ,-ncol(data)])
tidy(head(round(descCor,1)))
corrplot(descCor, method="color")
corrplot(descCor, method="number", number.digits= 1)
install.packages("ggfortify")
set.seed(7)
# load the library
suppressMessages(library(mlbench))
suppressMessages(library(caret))
# load the data
data  <- read_csv("./data/pima_indians_diabetes.csv", col_names = FALSE)
names <- c('preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class')
names(data) <- names
data$class <- factor(data$class)
data       <- as.data.frame(data)
filterCtrl <- sbfControl(functions = rfSBF, method = "repeatedcv", repeats = 10)
set.seed(10)
rfWithFilter <- sbf(data[,1:8], data[,9], sbfControl = filterCtrl)
set.seed(7)
# load the library
suppressMessages(library(mlbench))
suppressMessages(library(caret))
# load the data
data  <- read_csv("./data/pima_indians_diabetes.csv", col_names = FALSE)
names <- c('preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class')
names(data) <- names
data$class <- factor(data$class)
data       <- as.data.frame(data)
filterCtrl <- sbfControl(functions = rfSBF, method = "repeatedcv", repeats = 10)
set.seed(10)
rfWithFilter <- sbf(data[,1:8], data[,9], sbfControl = filterCtrl)
suppressMessages(library(tidyverse))
suppressMessages(library(tidyverse))
set.seed(7)
# load the library
suppressMessages(library(mlbench))
suppressMessages(library(caret))
# load the data
data  <- read_csv("./data/pima_indians_diabetes.csv", col_names = FALSE)
names <- c('preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class')
names(data) <- names
data$class <- factor(data$class)
data       <- as.data.frame(data)
filterCtrl <- sbfControl(functions = rfSBF, method = "repeatedcv", repeats = 10)
set.seed(10)
rfWithFilter <- sbf(data[,1:8], data[,9], sbfControl = filterCtrl)
set.seed(7)
# load the library
suppressMessages(library(mlbench))
suppressMessages(library(caret))
# load the data
data  <- read_csv("./data/pima_indians_diabetes.csv", col_names = FALSE)
names <- c('preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class')
names(data) <- names
data$class <- factor(data$class)
data       <- as.data.frame(data)
filterCtrl <- sbfControl(functions = rfSBF, method = "repeatedcv", repeats = 5)
set.seed(10)
rfWithFilter <- sbf(data[,1:8], data[,9], sbfControl = filterCtrl)
suppressMessages(library(tidyverse))
set.seed(7)
# load the library
suppressMessages(library(mlbench))
suppressMessages(library(caret))
# load the data
data  <- read_csv("./data/pima_indians_diabetes.csv", col_names = FALSE)
names <- c('preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class')
names(data) <- names
data$class <- factor(data$class)
data       <- as.data.frame(data)
filterCtrl <- sbfControl(functions = rfSBF, method = "repeatedcv", repeats = 5)
set.seed(10)
rfWithFilter <- sbf(data[,1:8], data[,9], sbfControl = filterCtrl)
rm(list =ls())
suppressMessages(library(tidyverse))
suppressMessages(library(tidyverse))
set.seed(7)
# load the library
suppressMessages(library(mlbench))
suppressMessages(library(caret))
# load the data
data  <- read_csv("./data/pima_indians_diabetes.csv", col_names = FALSE)
names <- c('preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class')
names(data) <- names
data$class <- factor(data$class)
data       <- as.data.frame(data)
filterCtrl <- sbfControl(functions = rfSBF, method = "repeatedcv", repeats = 5)
set.seed(10)
rfWithFilter <- sbf(data[,1:8], data[,9], sbfControl = filterCtrl)
rfWithFilter
set.seed(7)
# load the library
suppressMessages(library(mlbench))
suppressMessages(library(caret))
# load the data
data  <- read_csv("./data/pima_indians_diabetes.csv", col_names = FALSE)
names <- c('preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class')
names(data) <- names
data$class <- factor(data$class)
data       <- as.data.frame(data)
filterCtrl <- sbfControl(functions = rfSBF, method = "repeatedcv", repeats = 10)
set.seed(10)
rfWithFilter <- sbf(data[,1:8], data[,9], sbfControl = filterCtrl)
rfWithFilter
filterCtrl
prin(filterCtrl)
print(filterCtrl)
rfWithFilter
help(randomUniformForest)
suppressMessages(library(randomUniformForest))
idx <- rminer::holdout(y = data$class)
prep <- caret::preProcess(x = data[idx$tr, -ncol(data)],method = c("spatialSign"))
x.train <- predict(prep, data[idx$tr, -ncol(data)])
x.test <- predict(prep, data[idx$ts, -ncol(data)])
y.train <- data[idx$tr, ncol(data)]
y.test <- data[idx$ts, ncol(data)]
ruf <- randomUniformForest( X = x.train,
Y = y.train,
xtest = x.test,
ytest = y.test,
mtry = 1, ntree = 300,
threads = 2,
nodesize = 2
)
randomUniformForest
?randomUniformForest
suppressMessages(library(randomUniformForest))
idx <- rminer::holdout(y = data$class)
prep <- caret::preProcess(x = data[idx$tr, -ncol(data)],method = c("spatialSign"))
x.train <- predict(prep, data[idx$tr, -ncol(data)])
x.test <- predict(prep, data[idx$ts, -ncol(data)])
y.train <- data[idx$tr, ncol(data)]
y.test <- data[idx$ts, ncol(data)]
ruf <- randomUniformForest( X = x.train,
Y = y.train,
xtest = x.test,
ytest = y.test,
mtry = ifelse(bagging, ncol(X), floor(4/3*ncol(X))),
ntree = 300,
threads = 2,
nodesize = 2
)
suppressMessages(library(randomUniformForest))
idx <- rminer::holdout(y = data$class)
prep <- caret::preProcess(x = data[idx$tr, -ncol(data)],method = c("spatialSign"))
x.train <- predict(prep, data[idx$tr, -ncol(data)])
x.test <- predict(prep, data[idx$ts, -ncol(data)])
y.train <- data[idx$tr, ncol(data)]
y.test <- data[idx$ts, ncol(data)]
ruf <- randomUniformForest( X = x.train,
Y = y.train,
xtest = x.test,
ytest = y.test,
#mtry = 1,
ntree = 300,
threads = 2,
nodesize = 2
)
print(ruf)
plot(ruf)
set.seed(7)
# load the library
suppressMessages(library(mlbench))
suppressMessages(library(caret))
# load the data
data  <- read_csv("./data/pima_indians_diabetes.csv", col_names = FALSE)
names <- c('preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class')
names(data) <- names
data$class <- factor(data$class)
data       <- as.data.frame(data)
filterCtrl <- sbfControl(functions = rfSBF, method = "repeatedcv", repeats = 10)
set.seed(10)
rfWithFilter <- sbf(data[,1:8], data[,9], sbfControl = filterCtrl)
suppressMessages(library(tidyverse))
suppressMessages(library(tidyverse))
set.seed(7)
# load the library
suppressMessages(library(mlbench))
suppressMessages(library(caret))
# load the data
data  <- read_csv("./data/pima_indians_diabetes.csv", col_names = FALSE)
names <- c('preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class')
names(data) <- names
data$class <- factor(data$class)
data       <- as.data.frame(data)
filterCtrl <- sbfControl(functions = rfSBF, method = "repeatedcv", repeats = 10)
set.seed(10)
rfWithFilter <- sbf(data[,1:8], data[,9], sbfControl = filterCtrl)
rfWithFilter
rm(list =ls())
suppressMessages(library(tidyverse))
set.seed(7)
# load the library
suppressMessages(library(mlbench))
suppressMessages(library(caret))
# load the data
data  <- read_csv("./data/pima_indians_diabetes.csv", col_names = FALSE)
names <- c('preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class')
names(data) <- names
data$class <- factor(data$class)
data       <- as.data.frame(data)
filterCtrl <- sbfControl(functions = rfSBF, method = "repeatedcv", repeats = 5)
set.seed(10)
rfWithFilter <- sbf(data[,1:8], data[,9], sbfControl = filterCtrl)
summary(rfWithFilter)
print(rfWithFilter)
set.seed(7)
# load the library
suppressMessages(library(mlbench))
suppressMessages(library(caret))
# load the data
data  <- read_csv("./data/pima_indians_diabetes.csv", col_names = FALSE)
names <- c('preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class')
names(data) <- names
data$class <- factor(data$class)
data       <- as.data.frame(data)
filterCtrl <- sbfControl(functions = rfSBF, method = "repeatedcv", repeats = 1)
set.seed(10)
rfWithFilter <- sbf(data[,1:8], data[,9], sbfControl = filterCtrl)
print(rfWithFilter)
print(rfWithFilter)
# define the control using a random forest selection function
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
# run the RFE algorithm
results <- rfe(data[,1:8], data[,9], sizes=c(1:8), rfeControl=control)
# summarize the results
print(results)
# list the chosen features
predictors(results)
# plot the results
plot(results, type=c("g", "o"))
install.packages("rpart")
install.packages("rpart")
install.packages("rpart.plot")
install.packages("rpart")
install.packages("rpart")
